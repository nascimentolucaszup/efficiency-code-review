name: "PR Workflow with StackSpot API: Add Description"

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pr_add_description:
    runs-on: ubuntu-latest

    steps:
    # Step: Checkout do código
      - name: "Checkout do código"
        uses: actions/checkout@v4
        with:
          # Faz o checkout do branch da pull request
          ref: ${{ github.event.pull_request.head.ref }}
          # Repositório do PR
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      # Step: Get the changed code
      - name: Get changed code
        id: changed_code
        run: |
          git fetch origin main
          git diff origin/main..origin/${{ github.event.pull_request.head.ref }} >> diff_output.txt
          
      # Step: Autenticação na API da StackSpot
      - name: "Autenticar na API da StackSpot"
        id: authenticate_stackspot
        run: |
          echo "Autenticando na API da StackSpot..."
          STACKSPOT_AUTH_TOKEN=$(curl -X POST ${{vars.AUTH_URL}} \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode 'client_id=${{secrets.CLIENT_ID}}' \
            --data-urlencode 'grant_type=${{vars.GRANT_TYPE}}' \
            --data-urlencode 'client_secret=${{secrets.CLIENT_SECRET}}')
          echo $(echo $STACKSPOT_AUTH_TOKEN | jq -r '.access_token')
          ACCESS_TOKEN=$(echo $STACKSPOT_AUTH_TOKEN | jq -r '.access_token')
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo $access_token

      # Step: Chamada para a API "Remote Quick Command: Descrição do Pull Request"
      - name: "Executar Quick Command: Descrição do Pull Request"
        id: execute_description_command
        run: |
          echo "Executando Quick Command para Descrição do PR..."
          input_data=$(cat diff_output.txt)
          echo $input_data
          json_payload=$(jq -n --arg input_data "$input_data" '{input_data: $input_data}')
          execution_id_description=$(curl -X POST ${{vars.GENAI_CODE_BUDDY_URL}}/create-execution/ADICIONAR AQUI O SLUG DO SEU QUICK COMMAND \
            -H "Authorization: Bearer $access_token"  \
            -H "Content-Type: application/json" \
            -d "$json_payload")
          echo "execution_id_description=$execution_id_description" >> $GITHUB_OUTPUT
          echo $execution_id_description

      # Step: Verificação do Status da Execução
      - name: "Verificar Status da Execução: Descrição do PR"
        id: check_description_status
        run: |
          echo "Verificando status da execução..."
          execution_id_description=$(echo ${{ steps.execute_description_command.outputs.execution_id_description }} | tr -d '"')
          status="PENDING"
          echo "${{vars.GENAI_CODE_BUDDY_URL}}/callback/$execution_id_description"
          while [ "$status" != "COMPLETED" ]; do
            response=$(curl -X GET ${{vars.GENAI_CODE_BUDDY_URL}}/callback/$execution_id_description \
              -H "Authorization: Bearer $access_token" \
              -H "Content-Type: application/json")
            status=$(echo $response | jq -r '.progress.status')
            echo "Status atual: $status"
            sleep 5
          done
          pull_request_description=$(echo $response | jq -r '.result')
          echo "pull_request_description=$pull_request_description" >> description_output.txt
          echo $pull_request_description

      # Step: Atualizar a descrição do Pull Request
      - name: "Atualizar Descrição do Pull Request"
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './description_output.txt';

            // Verificar se o arquivo existe
            if (fs.existsSync(path)) {
              // Ler o conteúdo do arquivo
              const diffContent = fs.readFileSync(path, 'utf8');

              // Atualizar a descrição do Pull Request usando o octokit
              github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: diffContent
              });
            } else {
              console.log("Arquivo diff_output.txt não encontrado.");
            }